
# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
version: 2.1

description: | 
  Execute your PreFlight tests within your CircleCI build. 
  
display:
  home_url: https://preflight.com/
  source_url: https://github.com/Preflight-HQ/PreFlight.CircleCI

examples:    
  run_a_test:
    description: Run a test, take screenshot of each step and wait result.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-a-test:
          jobs:
            - preflight/run_a_test:
                testId: "<test-id>"
                environmentId: ""
                platforms: ""
                sizes: ""
                captureScreenshots: true
                waitResults: true
  
  run_group_test:
    description: Run a group of tests, take screenshot of each step and wait results.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-group-test:
          jobs:
            - preflight/run_group_test:
                groupId: "<group-id>"
                environmentId: ""
                platforms: ""
                sizes: ""
                captureScreenshots: true
                waitResults: true

  run_all_tests:
    description: Run all your PreFlight tests. While running tests take a screenshot of each step and wait for each result.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-all-tests:
          jobs:
            - preflight/run_all_tests:
                environmentId: ""
                platforms: ""
                sizes: ""
                captureScreenshots: true
                waitResults: true
              
  across_different_environments:
    description: Run a test across your development environments.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-a-test:
          jobs:
            - preflight/run_a_test:
                testId: "<test-id>"
                environmentId: "<environment-id>"
                platforms: ""
                sizes: ""
                captureScreenshots: true
                waitResults: true
                
  across_different_browsers:
    description: Run a test across different browsers.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-a-test:
          jobs:
            - preflight/run_a_test:
                testId: "<test-id>"
                environmentId: ""
                platforms: "win-ie,win-firefox"
                sizes: ""
                captureScreenshots: true
                waitResults: true

  different_screen_sizes:
    description: Run a test at different screen sizes.
    usage:
      version: 2.1
      orbs:
        preflight: preflight/test-runner@1.0
      workflows:
        run-a-test:
          jobs:
            - preflight/run_a_test:
                testId: "<test-id>"
                environmentId: ""
                platforms: ""
                sizes: "1920x1080,1440x900"
                captureScreenshots: true
                waitResults: true                
 
commands:
  run_test:
    description: Trigger your PreFlight tests with given paramaters.
    parameters:
      clientIdKey:
        type: env_var_name
        description: Variable name of PreFlight Client Id.
        default: PF_CLIENT_ID
      clientSecretKey:
        type: env_var_name
        description: Variable name of PreFlight Client Secret.
        default: PF_CLIENT_SECRET
      testId:
        type: string
        description: (optional) PreFlight test id.
        default: ""
      groupId:
        type: string
        description: (optional) PreFlight test group id.
        default: ""
      environmentId:
        type: string
        description: (optional) PreFlight environment id
        default: ""
      platforms:
        type: string
        description: (optional) Platform(s) and browser(s) you want to run your PreFlight test(s)
        default: ""
      sizes:
        type: string
        description: (optional) Size(s) you want to run your PreFlight test(s)
        default: ""
      captureScreenshots:
        type: boolean
        description: (optional) Capture screenshots enables taking screenhots of the each step.
        default: true
      waitResults:
        type: boolean
        description: (optional) Wait PreFlight test result(s). If you set it as true, your CircleCI build waits your PreFlight test result(s). 
        default: true
    steps:
      - run:
          name: Run tests
          command: |
              function GetPlatformAndBrowser(){
                PLATFORM_JSON="" 
                PLATFORM="$(echo $1 | cut -d "-" -f 1)"
                PLATFORM_LOWERCASE=$(echo ${PLATFORM,,})
                PLATFORM_NO_WHITESPACE=$(echo -e "${PLATFORM_LOWERCASE}" | tr -d '[:space:]')
                case $PLATFORM_NO_WHITESPACE in
                  win)
                    PLATFORM_JSON="windows" ;;
                  *)
                    echo "Invalid platform."
                    exit 1 ;;
                esac

                BROWSER_JSON="" 
                BROWSER="$(echo $1 | cut -d "-" -f 2)"
                BROWSER_LOWERCASE=$(echo ${BROWSER,,})
                BROWSER_NO_WHITESPACE=$(echo -e "${BROWSER_LOWERCASE}" | tr -d '[:space:]')
                case $BROWSER_NO_WHITESPACE in
                  ie)
                    BROWSER_JSON="internetexplorer" ;;
                  edge | firefox | chrome )
                    BROWSER_JSON=$BROWSER_NO_WHITESPACE ;;       
                  *)
                    echo "Invalid browser."
                    exit 1 ;;
                esac

                local JSON_STRING=$( jq -r -n --arg pl "$PLATFORM_JSON" --arg br "$BROWSER_JSON" '{"platform": $pl, "browser": $br}' )
                echo $JSON_STRING
              }

              function GetSize(){
                WIDTH="$(echo $1 | cut -d "x" -f 1)"
                WIDTH_NO_WHITESPACE="$(echo -e "${WIDTH}" | tr -d '[:space:]')"

                HEIGHT="$(echo $1 | cut -d "x" -f 2)"
                HEIGHT_NO_WHITESPACE="$(echo -e "${HEIGHT}" | tr -d '[:space:]')"

                local JSON_STRING=$( jq -n --arg wdth "$WIDTH_NO_WHITESPACE" --arg hght "$HEIGHT_NO_WHITESPACE" '{"width": $wdth, "height": $hght}' );
                echo $JSON_STRING
              }

              CLIENT_ID=${<< parameters.clientIdKey >>}
              CLIENT_SECRET=${<< parameters.clientSecretKey >>}
              TEST_ID="<< parameters.testId >>"
              GROUP_ID="<< parameters.groupId >>"
              ENVIRONMENT_ID="<< parameters.environmentId >>"
              PLATFORMS="<< parameters.platforms >>"
              SIZES="<< parameters.sizes >>"
              WAIT_RESULTS=<< parameters.waitResults >>
              CAPTURE_SCREENSHOTS=<< parameters.captureScreenshots >>

              API_URL="https://api.preflight.com/v1/tests"
              TOKEN_URL="https://auth.preflight.com/connect/token"

              TOKEN_REQUEST_BODY="client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials&scope=tests_run"
              TOKEN_RESULT=$(curl -k -s -XPOST -H"Content-Type: application/x-www-form-urlencoded" -d"$TOKEN_REQUEST_BODY" "$TOKEN_URL")
              ACCESS_TOKEN=$(echo $TOKEN_RESULT | jq -r '.access_token')

              echo "Access Token : $ACCESS_TOKEN"

              RUN_REQUEST_BODY='{
                "platforms":[],
                "sizes":[],
                "captureScreenshots":'"$CAPTURE_SCREENSHOTS"'
              }'

              PLATFORM_BROWSER_LIST=()
              if [ -n "$PLATFORMS" ]
              then 
              for PLATFORM_BROWSER in $(echo $PLATFORMS | tr "," "\n")
              do
                RES=$(GetPlatformAndBrowser "$PLATFORM_BROWSER")
                RUN_REQUEST_BODY=$(echo $RUN_REQUEST_BODY | jq --argjson RES "$RES" '.platforms |= .+ [$RES]' )
              done
              fi

              SIZES_ARRAY=()
              if [ -n "$SIZES" ]
              then 
              for SIZE in $(echo $SIZES | tr "," "\n")
              do
                RES=$(GetSize "$SIZE")
                RUN_REQUEST_BODY=$(echo $RUN_REQUEST_BODY | jq --argjson RES "$RES" '.sizes |= .+ [$RES]' )
              done
              fi

              REQUEST_PATH="Run"
              if [ -n "$TEST_ID" ]
              then 
              REQUEST_PATH=$TEST_ID"/Run"
              elif [ -n "$GROUP_ID" ]
              then 
              RUN_REQUEST_BODY=$(echo $RUN_REQUEST_BODY | jq -r --arg GRPID $GROUP_ID '. += {groupId: $GRPID}')
              fi

              if [ -n "$ENVIRONMENT_ID" ]
              then 
              RUN_REQUEST_BODY=$(echo $RUN_REQUEST_BODY | jq -r --arg ENVID $ENVIRONMENT_ID '. += {environmentId: $ENVID}')
              fi

              echo "$RUN_REQUEST_BODY"
              TEST_RESULT=$(curl -s -XPOST -H"Content-Type: application/json" -H"Authorization: bearer $ACCESS_TOKEN" -d"$RUN_REQUEST_BODY" "$API_URL/$REQUEST_PATH")
              echo "$TEST_RESULT"

              TEST_RUN_ID=$(echo $TEST_RESULT | jq -r '.testRunId')

              if [ -z "$TEST_RUN_ID" ]
              then 
                echo "The test run has been failed."
                exit 1
              fi
              echo "The test(s) has been successfully queued.TestRunId : $TEST_RUN_ID"

              if [ "$WAIT_RESULTS" = true ] 
              then
                echo "Waiting for test result(s)"
                
                WAIT=true
                while [ "$WAIT" = true ]
                do
                    TEST_RUN_RESULT=$(curl -s -H"Authorization: bearer $ACCESS_TOKEN" "$API_URL/run/$TEST_RUN_ID")
                    echo "$TEST_RUN_RESULT"

                    FAILED=$( echo "$TEST_RUN_RESULT" | jq -r '.results[] | select(.status == "Failed")')
                    if [ -n "$FAILED" ]
                    then 
                        echo "Below test(s) failed."
                        echo "$FAILED"
                        exit 1
                    fi

                    WAITING=$( echo "$TEST_RUN_RESULT" | jq -r '.results[] | select(.status == ("Queued","Running"))')

                    if [ -n "$WAITING" ]
                    then
                        echo "Waiting for all the tests to be completed."
                    else
                        echo "All test(s) successfully completed."
                        exit 0
                    fi
                    sleep 5
                done
              else
                exit 0
              fi
               
jobs:
  run_a_test:
    description: Run a test. 
    parameters:   
      clientIdKey:
        type: env_var_name
        description: Variable name of PreFlight Client Id.
        default: PF_CLIENT_ID
      clientSecretKey:
        type: env_var_name
        description: Variable name of PreFlight Client Secret.
        default: PF_CLIENT_SECRET   
      testId:
        type: string
        description: PreFlight test id.
      environmentId:
        type: string
        description: (optional) PreFlight environment id
        default: ""
      platforms:
        type: string
        description: (optional) Platform(s) and browser(s) you want to run your PreFlight test(s)
        default: ""
      sizes:
        type: string
        description: (optional) Size(s) you want to run your PreFlight test(s)
        default: ""
      captureScreenshots:
        type: boolean
        description: (optional) Capture screenshots enables taking screenhots of the each step.
        default: true
      waitResults:
        type: boolean
        description: (optional) Wait PreFlight test result(s). If you set it as true, your CircleCI build waits your PreFlight test result(s). 
        default: true
    docker:
      - image: cimg/node:lts
    steps:
      - run_test:
          clientIdKey: << parameters.clientIdKey >>
          clientSecretKey: << parameters.clientSecretKey >>
          testId: << parameters.testId >>
          environmentId: << parameters.environmentId >>
          platforms: << parameters.platforms >>
          sizes: << parameters.sizes >>
          captureScreenshots: << parameters.captureScreenshots >>
          waitResults: << parameters.waitResults >>

  run_group_test:
    description: Run group test. 
    parameters:   
      clientIdKey:
        type: env_var_name
        description: Variable name of PreFlight Client Id.
        default: PF_CLIENT_ID
      clientSecretKey:
        type: env_var_name
        description: Variable name of PreFlight Client Secret.
        default: PF_CLIENT_SECRET   
      groupId:
        type: string
        description: PreFlight group id.
      environmentId:
        type: string
        description: (optional) PreFlight environment id
        default: ""
      platforms:
        type: string
        description: (optional) Platform(s) and browser(s) you want to run your PreFlight test(s)
        default: ""
      sizes:
        type: string
        description: (optional) Size(s) you want to run your PreFlight test(s)
        default: ""
      captureScreenshots:
        type: boolean
        description: (optional) Capture screenshots enables taking screenhots of the each step.
        default: true
      waitResults:
        type: boolean
        description: (optional) Wait PreFlight test result(s). If you set it as true, your CircleCI build waits your PreFlight test result(s). 
        default: true
    docker:
      - image: cimg/node:lts
    steps:
      - run_test:
          clientIdKey: << parameters.clientIdKey >>
          clientSecretKey: << parameters.clientSecretKey >>
          groupId: << parameters.groupId >>
          environmentId: << parameters.environmentId >>
          platforms: << parameters.platforms >>
          sizes: << parameters.sizes >>
          captureScreenshots: << parameters.captureScreenshots >>
          waitResults: << parameters.waitResults >>

  run_all_tests:
    description: Run all tests. 
    parameters:
      clientIdKey:
        type: env_var_name
        description: Variable name of PreFlight Client Id.
        default: PF_CLIENT_ID
      clientSecretKey:
        type: env_var_name
        description: Variable name of PreFlight Client Secret.
        default: PF_CLIENT_SECRET   
      environmentId:
        type: string
        description: (optional) PreFlight environment id
        default: ""
      platforms:
        type: string
        description: (optional) Platform(s) and browser(s) you want to run your PreFlight test(s)
        default: ""
      sizes:
        type: string
        description: (optional) Size(s) you want to run your PreFlight test(s)
        default: ""
      captureScreenshots:
        type: boolean
        description: (optional) Capture screenshots enables taking screenhots of the each step.
        default: true
      waitResults:
        type: boolean
        description: (optional) Wait PreFlight test result(s). If you set it as true, your CircleCI build waits your PreFlight test result(s). 
        default: true
    docker:
      - image: cimg/node:lts
    steps:
      - run_test:          
          clientIdKey: << parameters.clientIdKey >>
          clientSecretKey: << parameters.clientSecretKey >>
          environmentId: << parameters.environmentId >>
          platforms: << parameters.platforms >>
          sizes: << parameters.sizes >>
          captureScreenshots: << parameters.captureScreenshots >>
          waitResults: << parameters.waitResults >>